<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Amit Acharya Technical Blog]]></title>
  <link href="http://amitach.github.io/atom.xml" rel="self"/>
  <link href="http://amitach.github.io/"/>
  <updated>2014-03-30T03:04:06+05:30</updated>
  <id>http://amitach.github.io/</id>
  <author>
    <name><![CDATA[Amit Acharya]]></name>
    <email><![CDATA[amitach@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Metaprogramming in Ruby: What Is There in an Object]]></title>
    <link href="http://amitach.github.io/blog/2014/03/30/metaprogramming-in-ruby-what-is-there-in-an-object/"/>
    <updated>2014-03-30T01:33:08+05:30</updated>
    <id>http://amitach.github.io/blog/2014/03/30/metaprogramming-in-ruby-what-is-there-in-an-object</id>
    <content type="html"><![CDATA[<p>Before we dive into details of Metaprogramming lets first see what is really there in an Object,
observe the following piece of code.</p>

<figure class='code'><figcaption><span>A simple object with an instance variable </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="k">class</span> <span class="nc">A</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">method</span>
</span><span class='line'>   <span class="vi">@v</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'> <span class="k">end</span>
</span><span class='line'> <span class="n">a</span> <span class="o">=</span> <span class="n">A</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'> <span class="n">a</span><span class="o">.</span><span class="n">class</span> <span class="c1"># =&gt; A</span>
</span></code></pre></td></tr></table></div></figure>


<p>
    The above piece of code primarily has three things
    <ol style="margin-left:30px">
        <li>Instance Variable</li>
        <li>Method</li>
        <li>Class</li>
    </ol>
    <strong>Let&#8217;s look at each one of them closely now</strong>
    <ul style="margin-left:30px">
        <li><h4>Instance Variable:</h4>
            An instance variable has a name beginning with @ and its scope is confined to whatever object self refers to.
            <p> Objects contain instance variables, Ruby provides a method <span class ="quotes" > Object#instance_variables()</span> to peek at them.
            In the above example we have just one instance variable</p>
<figure class='code'><figcaption><span>Instance Variables for the above piece of code </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="n">a</span><span class="o">.</span><span class="n">method</span>
</span><span class='line'> <span class="n">a</span><span class="o">.</span><span class="n">instance_variables</span> <span class="c1"># =&gt; [:@v] </span>
</span></code></pre></td></tr></table></div></figure>
        <p>Unlike in static languages like Java, in Ruby there is no connection between an object&#8217;s class and its instance variables.
Instance Variables come into existence whenever you assign them a value. Important thing to understand is that you can have objects of the <span class='quotes'>&#8220;same&#8221;</span> class that carry different sets of instance variables</p>

Look at the following code
<figure class='code'><figcaption><span>Different instance variables per object</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="k">class</span> <span class="nc">A</span>
</span><span class='line'>   <span class="k">def</span> <span class="nf">method</span>
</span><span class='line'>     <span class="vi">@v</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>   <span class="k">end</span>
</span><span class='line'>   <span class="k">def</span> <span class="nf">new_method</span>
</span><span class='line'>     <span class="vi">@c</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'>   <span class="k">end</span>
</span><span class='line'> <span class="k">end</span>
</span><span class='line'> <span class="n">a</span> <span class="o">=</span> <span class="n">A</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'> <span class="n">a</span><span class="o">.</span><span class="n">method</span>
</span><span class='line'> <span class="n">a</span><span class="o">.</span><span class="n">instance_variables</span> <span class="c1">#=&gt; [:@v]  </span>
</span><span class='line'> <span class="n">b</span> <span class="o">=</span> <span class="n">A</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'> <span class="n">b</span><span class="o">.</span><span class="n">new_method</span>
</span><span class='line'> <span class="n">b</span><span class="o">.</span><span class="n">instance_variables</span> <span class="c1">#=&gt; [:@c]  </span>
</span></code></pre></td></tr></table></div></figure>
Observe that if we hadn&#8217;t called <span class='quotes'>a.method()</span> or <span class='quotes'> b.new_method() </span> objects a or b would not have any instance variables.
That gives a basic idea of what instance variables are. Now let&#8217;s move onto methods.
        </li>
        <br/>
        <li><h4>Method:</h4>
            Besides having instance variables objects have methods

You can see an objects methods by calling <span class="quotes">Object#methods()</span>. Most of the methods will be the methods inherited from Object so this list of methods will be quite long.

We can use <span class="quotes"> Array#grep()</span> to find the method we are looking for

<figure class='code'><figcaption><span>Objects have methods and can be searched using grep</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="n">a</span><span class="o">.</span><span class="n">methods</span><span class="o">.</span><span class="n">grep</span><span class="p">(</span><span class="sr">/new_/</span><span class="p">)</span> <span class="c1">#=&gt; [:new_method] </span>
</span></code></pre></td></tr></table></div></figure>
Methods are analogous to functions in C or methods in Java so let&#8217;s not deep dive into them.

        </li>
        <br/>
        <li><h4>Class:</h4>
Yes, classes are nothing but objects in ruby and since a class is an object, everything that applies to an object also applies to a class.

Classes like any object have their own class, called <span class="quotes"> Class </span>
<br/>
<ul>
<li>The method of an object are the instance methods of its class.</li> 
<li>Methods of a class are the instance methods of <span class="quotes"> Class</span>.</li>
</ul>
<br/>
Read that again
<br/>
<br/>
Following is an example that shows that String&#8217;s class is Class
<figure class='code'><figcaption><span>String&#8217;s class</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">head</span> <span class="p">:</span><span class="mo">001</span> <span class="o">&gt;</span> <span class="nb">String</span><span class="o">.</span><span class="n">class</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="no">Class</span>
</span></code></pre></td></tr></table></div></figure>
        </li>
    </ul>

That should clear the basics of what all an object has. Next post will be about the object model.
</p>

]]></content>
  </entry>
  
</feed>
