<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Amit Acharya Technical Blog]]></title>
  <link href="http://amitach.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://amitach.github.io/"/>
  <updated>2014-03-30T15:21:36+05:30</updated>
  <id>http://amitach.github.io/</id>
  <author>
    <name><![CDATA[Amit Acharya]]></name>
    <email><![CDATA[amitach@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Metaprogramming Ruby: Understanding Ruby Self]]></title>
    <link href="http://amitach.github.io/blog/2014/03/30/metaprogramming-ruby-understanding-ruby-self/"/>
    <updated>2014-03-30T03:33:42+05:30</updated>
    <id>http://amitach.github.io/blog/2014/03/30/metaprogramming-ruby-understanding-ruby-self</id>
    <content type="html"><![CDATA[<h1>Self</h1>


<h4>With respect to an object</h4>




<p>
Every line of Ruby code is executed inside an object the so called current object. The current object is also known as self, because you can
access it with the self keyword.Only one object can take the role of self at a given time, but no object holds that role for a long time. In particular, when you call a method, the receiver becomes self. From that moment on, all instance variables are instance variables of self, and all methods called without an explicit receiver are called on self. As soon as your code explicitly calls a method on some other object, that other object becomes self.

``` ruby self in Ruby
class FooBaar
    def foo
        puts "#{self.inspect} 1"
        @a = "hello"
        bar() # Same as self.my_method()
        puts "#{self.inspect} 2"
        self
    end

    def bar
        puts "#{self.inspect} 3"
        @a = @a + " world"
        puts "#{self.inspect} 4"
    end
end
 #Let's do the following things on irb and observe, the code above was pasted to irb
head :072 > self
 => main 
head :073 > obj = FooBaar.new
 => #<FooBaar:0x00000001b787d8> 
head :074 > obj.foo 
#<FooBaar:0x00000001b787d8> 1
#<FooBaar:0x00000001b787d8 @a="hello"> 3
#<FooBaar:0x00000001b787d8 @a="hello world"> 4
#<FooBaar:0x00000001b787d8 @a="hello world"> 2
 => #<FooBaar:0x00000001b787d8 @a="hello world"> 
head :075 > self
 => main 

```

Let's dissect it now. Following things have to be observed
<br/>
<br/>
<ul> 
<blockquote>
    Outside the context of any class/module etc. self always refers to an object called as main created by Ruby for us
</blockquote>
<blockquote>
    As soon as you call method foo, the receiver obj becomes self (#FooBaar:0x00000001b787d8 1 ).
</blockquote>
<blockquote>
  Because of that, the instance variable @a is an instance variable of obj, and the
method bar( ) is called on obj( ).
</blockquote>
 <blockquote>- As bar() is executed, obj is still self <span class="quotes">(#FooBaar:0x00000001b787d8 3 )</span> (observe the 3 got printed), so @a is still an instance variable of obj.</blockquote>
 <blockquote>
  Finally, foo( ) returns a reference to self<span class="quotes">(#FooBaar:0x00000001b787d8 @a="hello world" )</span> and as expected the final value of the instance variable @a is "hello world".
 </blockquote>
<blockquote>  At the end the self is <strong>main</strong> again outside the scope of obj </blockquote>
</ul>
</p>




<h1>Self</h1>


<p> <h4> With respect to classes and modules</h4></p>

<p>
Usually the role of self is taken by the last object who received a method
call. However, in a class or module definition (and outside of any method), the role of self is taken by the class or module

``` ruby self in classes/modules
result = class MyClass
    self
end
result # => MyClass

```

Let's look at one more example
``` ruby ruby classes are objects
class Foo
    @a = 1
    def self.read
        @a
    end
    def write 
        @a = 2
    end
    def read
        @a
    end
end

obj = Foo.new
obj.write
obj.read # => 2
Foo.read # => 1

```

As we can see the previous code defines two instance variables. Both @a but they are defined in different scopes and they belong to different objects
<br/><br/>
<ul>
<blockquote>
    One @a is defined with obj as self, so it's an instance variable of obj object
</blockquote>
<blockquote>
    The other @a is defined with Foo as self, so it's an instance variable of the Foo Object (Remember classes are nothing but objects in Ruby) 
</blockquote>
</ul>

With the above concepts in mind we can build on and understand when exactly self is to be used and what does it refer to. There are many concepts which are built on the understanding of self like class_eval, class methods etc. We will look at them soon
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Metaprogramming in Ruby: What Is There in an Object]]></title>
    <link href="http://amitach.github.io/blog/2014/03/30/metaprogramming-in-ruby-what-is-there-in-an-object/"/>
    <updated>2014-03-30T01:33:08+05:30</updated>
    <id>http://amitach.github.io/blog/2014/03/30/metaprogramming-in-ruby-what-is-there-in-an-object</id>
    <content type="html"><![CDATA[<p>Before we dive into details of Metaprogramming lets first see what is really there in an Object,
observe the following piece of code.</p>

<p><code>ruby A simple object with an instance variable
 class A
  def method
   @v = 1
  end
 end
 a = A.new
 a.class # =&gt; A
</code></p>

<p>
    The above piece of code primarily has three things
    <ol style="margin-left:30px">
        <li>Instance Variable</li>
        <li>Method</li>
        <li>Class</li>
    </ol>
    <strong>Let's look at each one of them closely now</strong>
    <ul style="margin-left:30px">
        <li><h4>Instance Variable:</h4>
            An instance variable has a name beginning with @ and its scope is confined to whatever object self refers to.
            <p> Objects contain instance variables, Ruby provides a method <span class ="quotes" > Object#instance_variables()</span> to peek at them.
            In the above example we have just one instance variable</p>
``` ruby Instance Variables for the above piece of code 
 a.method  
 a.instance_variables # => [:@v] 
```
        <p>Unlike in static languages like Java, in Ruby there is no connection between an object's class and its instance variables.
Instance Variables come into existence whenever you assign them a value. Important thing to understand is that you can have objects of the <span class='quotes'>"same"</span> class that carry different sets of instance variables</p>

Look at the following code
``` ruby Different instance variables per object
 class A  
   def method  
     @v = 1  
   end  
   def new_method  
     @c = 2  
   end  
 end  
 a = A.new  
 a.method  
 a.instance_variables #=> [:@v]  
 b = A.new  
 b.new_method  
 b.instance_variables #=> [:@c]  
```
Observe that if we hadn't called <span class='quotes'>a.method()</span> or <span class='quotes'> b.new_method() </span> objects a or b would not have any instance variables.
That gives a basic idea of what instance variables are. Now let's move onto methods.
        </li>
        <br/>
        <li><h4>Method:</h4>
            Besides having instance variables objects have methods

You can see an objects methods by calling <span class="quotes">Object#methods()</span>. Most of the methods will be the methods inherited from Object so this list of methods will be quite long.

We can use <span class="quotes"> Array#grep()</span> to find the method we are looking for

``` ruby Objects have methods and can be searched using grep
     a.methods.grep(/new_/) #=> [:new_method] 
```
Methods are analogous to functions in C or methods in Java so let's not deep dive into them.

        </li>
        <br/>
        <li><h4>Class:</h4>
Yes, classes are nothing but objects in ruby and since a class is an object, everything that applies to an object also applies to a class.

Classes like any object have their own class, called <span class="quotes"> Class </span>
<br/>
<ul>
<li>The method of an object are the instance methods of its class.</li> 
<li>Methods of a class are the instance methods of <span class="quotes"> Class</span>.</li>
</ul>
<br/>
Read that again
<br/>
<br/>
Following is an example that shows that String's class is Class
``` ruby String's class
    head :001 > String.class
 => Class
```
        </li>
    </ul>

That should clear the basics of what all an object has. Next post will be about the object model.
</p>

]]></content>
  </entry>
  
</feed>
